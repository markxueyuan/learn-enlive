<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1412841564752">{:repl-history {:ide [], :local [&quot;(clojure.java.io/file \&quot;a.html\&quot;)&quot; &quot;(-&gt; (clojure.java.io/file \&quot;scrape.html\&quot;)\n    html/html-resource)&quot; &quot;(-&gt; (clojure.java.io/file \&quot;/scrape.html\&quot;)\n    html/html-resource)&quot; &quot;(-&gt; (clojure.java.io/file \&quot;./scrape.html\&quot;)\n    html/html-resource)&quot; &quot;(file-seq (java.io.File \&quot;.\&quot;))&quot; &quot;(file-seq (java.io.File. \&quot;.\&quot;))&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:head :title] (html/content \&quot;我想换个名字\&quot;))&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:title] (html/content \&quot;我想换个名字\&quot;))&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  []\n)&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:body] identity\n)&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  []\n                  [:body] identity\n)&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:body]\n                  [:body] identity\n)&quot; &quot;(html/defsnippet dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:body]\n                  [:body] identity\n)&quot; &quot;(html/defsnippet dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [:header]\n                  [:body] identity\n)&quot; &quot;(html/defsnippet dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [a]\n                  [:body] (str a)\n)&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/scrape.html\&quot;\n                  [a]\n                  [:body] (str a)\n)&quot; &quot;(-&gt; (clojure.java.io/file \&quot;resources/public/scrape.html\&quot;)\n    html/html-resource)&quot; &quot;(html/deftemplate dialogue \&quot;reousrces/public/a.html\&quot;\n                  [])&quot; &quot;(html/defsnippet main-template \&quot;templates/header.html\&quot;\n                 [:header]\n                 [heading navigation-elements]\n                 [:h1] (html/content heading)\n                 [:ul [:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\n                                                                [:li :a] (html/content caption)\n                                                                [:li :a] (html/set-attr :href url)))&quot; &quot;(html/defsnippet main-template \&quot;resources/public/a.html\&quot;\n                 [:header]\n                 [heading navigation-elements]\n                 [:h1] (html/content heading)\n                 [:ul [:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\n                                                                [:li :a] (html/content caption)\n                                                                [:li :a] (html/set-attr :href url)))&quot; &quot;(html/defsnippet main-template \&quot;/resources/public/a.html\&quot;\n                 [:header]\n                 [heading navigation-elements]\n                 [:h1] (html/content heading)\n                 [:ul [:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\n                                                                [:li :a] (html/content caption)\n                                                                [:li :a] (html/set-attr :href url)))&quot; &quot;(html/defsnippet main-template \&quot;public/a.html\&quot;\n                 [:header]\n                 [heading navigation-elements]\n                 [:h1] (html/content heading)\n                 [:ul [:li html/first-of-type]] (html/clone-for [[caption url] navigation-elements]\n                                                                [:li :a] (html/content caption)\n                                                                [:li :a] (html/set-attr :href url)))&quot; &quot;(html/deftemplate dialogue \&quot;public/scrape.html\&quot;\n                  [])&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))\n&quot; &quot;(ns learn-enlive.handler\n  (:require [compojure.core :refer [defroutes GET routes]]\n            ;[compojure.route :as route]\n            ;[ring.util.response :as response]\n            ;[net.cgrand.enlive-html :as html]\n            [learn-enlive.routes.login :refer [login-page]]\n            [learn-enlvie.routes.scrape :refer [scrape-dialogue]]\n            [compojure.handler :as handler]\n            ))&quot; &quot;(html/deftemplate dialogue \&quot;public/scrape.html\&quot;\n                  []\n                  [:head :title] (html/content \&quot;我想要的标题\&quot;))&quot; &quot;(defroutes scrape-dialogue\n  (GET \&quot;/scrape\&quot; [] (dialogue)))&quot; &quot;(login-for-51 \&quot;18611798938\&quot; \&quot;y95u98a02n08\&quot;)&quot; &quot;(find-element :class-name \&quot;username\&quot;)&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))&quot; &quot;(ns learn-enlive.routes.login\n  (:require [learn-enlive.models.selenium :refer :all]\n            [compojure.core :refer :all]\n            [ring.util.response :as response]))&quot; &quot;(defn login-for-51\n  [user pwd]\n  (binding [my-driver (chrome)]\n    (to \&quot;https://www.u51.com/money/\&quot;)\n    (Thread/sleep 2000)\n    (-&gt; (find-element :name \&quot;user_name_input\&quot;)\n        (input user))\n    (-&gt; (find-element :name \&quot;user_pwd_input\&quot;)\n        (input pwd))\n    (Thread/sleep 1000)\n    (click (find-element :class-name \&quot;login-btn\&quot;))))&quot; &quot;(defn response\n  []\n  (response/resource-response \&quot;login.html\&quot; {:root \&quot;public\&quot;}))&quot; &quot;(response)&quot; &quot;(response/redirect \&quot;/scrape\&quot;)&quot; &quot;my-driver&quot; &quot;(ns learn-enlive.models.selenium\n  #_(:use [clj-webdriver.taxi])\n  (:import [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)))&quot; &quot;(get-element :class-name \&quot;mnav\&quot;)&quot; &quot;(to \&quot;http://www.sohu.com/\&quot;)&quot; &quot;(find-element :class-name \&quot;mnav\&quot;)&quot; &quot;(GetValue. (find-element :class-name \&quot;mnav\&quot;))&quot; &quot;(toString. (find-element :class-name \&quot;mnav\&quot;))&quot; &quot;(.toString (find-element :class-name \&quot;mnav\&quot;))&quot; &quot;(.getText (find-element :class-name \&quot;mnav\&quot;))&quot; &quot;(.getValue (find-element :class-name \&quot;mnav\&quot;))&quot; &quot;(to \&quot;http://baidu.com\&quot;)&quot; &quot;(use-ie)&quot; &quot;(find-element :class-name \&quot;head_wrapper\&quot;)&quot; &quot;(.getText (find-element :class-name \&quot;head_wrapper\&quot;))&quot; &quot;(get-value (find-element :class-name \&quot;head_wrapper\&quot;))&quot; &quot;(to \&quot;http://www.baidu.com/\&quot;)&quot; &quot;(execute-script \&quot;document.documentElement.outerHTML\&quot;)&quot; &quot;(def a 1*)&quot; &quot;(execute-script \&quot;return document.documentElement.outerHTML;\&quot;)&quot; &quot;(def a *1)&quot; &quot;a&quot; &quot;(html/html-resource a)&quot; &quot;(html/html-content a)&quot; &quot;(read-string a)&quot; &quot;(.getBytes a)&quot; &quot;(html/html-resource (.getBytes a))&quot; &quot;(java.io.StringReader. a)&quot; &quot;(html/select (html/html-resource (java.io.StringReader. a)) [:body])&quot; &quot;(html/html-resource (read-string a))&quot; &quot;(html/html-resource (read a))&quot; &quot;(html/html-resource (java.io.StringReader. a))&quot; &quot;(use-chrome)&quot; &quot;(ns learn-enlive.routes.scrape\n  (:require [learn-enlive.models.selenium :refer :all]\n            [compojure.core :refer :all]\n            [ring.util.response :as response]\n            [net.cgrand.enlive-html :as html]))&quot; &quot;(html/deftemplate success \&quot;public/scrape.html\&quot;\n                  [status]\n                  [:#failure-alert] nil)&quot; &quot;(html/deftemplate success \&quot;public/scrape.html\&quot;\n                  [status]\n                  [:#alert-failure] nil\n                  [:#button-failure])&quot; &quot;(html/deftemplate success \&quot;public/scrape.html\&quot;\n                  [status]\n                  [:#alert-failure] nil\n                  [:#button-failure] nil)&quot; &quot;(success \&quot;a\&quot;)&quot; &quot;(ns learn-enlive.models.selenium\n  #_(:use [clj-webdriver.taxi])\n  (:import [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)))\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defmacro find-element-help\n  [type name]\n  `(let [element# (~type ~name)]\n     (. my-driver (findElement element#))))\n\n(defn find-element\n  [type name]\n  (case type\n    :name (find-element-help By/name name)\n    :class-name (find-element-help By/className name)\n    :id (find-element-help By/id name)\n    :tag-name (find-element-help By/tagName name)\n    :link-text (find-element-help By/linkText name)\n    :partial-link-text (find-element-help By/partialLinkText name)\n    :css (find-element-help By/cssSelector name)\n    :xpath (find-element-help By/xpath name)\n    nil))\n\n(defmacro find-elements-help\n  [type name]\n  `(let [element# (~type ~name)]\n     (. my-driver (findElements element#))))\n\n(defn find-elements\n  [type name]\n  (case type\n    :name (find-elements-help By/name name)\n    :class-name (find-elements-help By/className name)\n    :id (find-elements-help By/id name)\n    :tag-name (find-elements-help By/tagName name)\n    :link-text (find-elements-help By/linkText name)\n    :partial-link-text (find-elements-help By/partialLinkText name)\n    :css (find-elements-help By/cssSelector name)\n    :xpath (find-elements-help By/xpath name)\n    nil))\n\n(defn click\n  [obj]\n  (.click obj))\n\n(defn input\n  [element &amp; strings]\n  (.sendKeys element (into-array strings)))\n\n(defn get-attribute\n  [obj attr]\n  (.getAttribute obj attr))\n\n(defn get-value\n  [obj]\n  (get-attribute obj \&quot;value\&quot;))\n\n(defn submit\n  [elt]\n  (.submit elt))\n\n(defn get-window-handles\n  [driver]\n  (.getWindowHandles driver))\n\n(defn switch-to-window\n  [window-name]\n  (.. my-driver switchTo (window window-name)))\n\n(defn switch-to-frame\n  [frame-name]\n  (.. my-driver switchTo (frame frame-name)))\n\n(defn find-alert\n  []\n  (.. my-driver switchTo alert))\n\n(defn navigate\n  [direction]\n  (case direction\n    :forward (.. my-driver navigate forward)\n    :back (.. my-driver navigate back)\n    nil))\n\n(defn print-cookie\n  []\n  (doseq [cookie (.. my-driver manage getCookies)]\n    (println (format \&quot;%s -&gt; %s\&quot; (.getName cookie) (.getValue cookie)))))\n\n(defn get-cookies\n  []\n  (.. my-driver manage getCookies))\n\n(defn delete-cookie-named\n  [cookie-name]\n  (.. my-driver manage (deleteCookieNamed cookie-name)))\n\n(defn delete-cookie\n  [cookie]\n  (.. my-driver manage (deleteCookie cookie)))\n\n(defn add-cookie\n  [k v]\n  (Cookie. k v))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defmacro build-element\n  [type name]\n  `(~type ~name))\n\n(defmacro wait-until\n  [time-out type name condition]\n  `(when-let [elt# (case ~type\n                     :name (By/name ~name)\n                     :class-name (By/className ~name)\n                     :id (By/id ~name)\n                     :tag-name (By/tagName ~name)\n                     :link-text (By/linkText ~name)\n                     :partial-link-text (By/partialLinkText ~name)\n                     :css (By/cssSelector ~name)\n                     :xpath (By/xpath ~name)\n                     nil)]\n     (.until\n       (WebDriverWait. my-driver ~time-out)\n       (~condition elt#))))\n\n(defn wait-until-find\n  [time-out type name]\n  (wait-until time-out type name ExpectedConditions/presenceOfElementLocated))\n\n\n(defn wait-until-clickable\n  [time-out type name]\n  (wait-until time-out type name ExpectedConditions/elementToBeClickable))\n\n(defn take-screenshot\n  []\n  (let [augment-driver ^TakesScreenshot (.augment (Augmenter.) my-driver)]\n    (.getScreenshotAs augment-driver OutputType/FILE)))\n\n\n\n\n\n(comment\n  (use-firefox)\n  (use-htmlunit)\n  (use-ie)\n  (use-chrome)\n  (to \&quot;http://www.baidu.com/\&quot;)\n  (find-element :name \&quot;wd\&quot;)\n  (find-element-help By/name \&quot;wd\&quot;)\n  (find-elements :css \&quot;#su\&quot;)\n  (find-elements :name \&quot;#su\&quot;)\n  (. my-driver (findElement (By/name \&quot;wd\&quot;)))\n  (.click (find-element :id \&quot;su\&quot;))\n  (.getAttribute (find-element :id \&quot;su\&quot;) \&quot;value\&quot;)\n  (get-value (find-element :id \&quot;su\&quot;))\n  (.submit (find-element :id \&quot;kw\&quot;))\n  (submit (find-element :id \&quot;kw\&quot;))\n  (get-window-handles my-driver)\n  (switch-to-window \&quot;{a257b72c-2bad-4859-a791-1ee47dafa2ea}\&quot;)\n  (find-alert)\n  (navigate :back)\n  (navigate :forward)\n  (new Cookie \&quot;markxueyuan\&quot; \&quot;y95u98a02n08\&quot;)\n  (.. my-driver manage getCookies)\n  (print-cookie)\n  (add-cookie \&quot;BD_UPN\&quot; \&quot;133144\&quot;)\n  (get-cookies)\n  (delete-cookie-named \&quot;BD_UPN\&quot;)\n  (doseq [c (get-cookies)]\n    (delete-cookie c))\n  (FirefoxProfile.)\n\n  (def x (+ 1 1))\n  (def x (+ 2 2))\n\n  (.getProfile (ProfilesIni.) \&quot;WebDriver\&quot;)\n\n  (.executeScript ^JavascriptExecutor my-driver \&quot;return navigator.userAgent;\&quot; (make-array Object 0))\n  (execute-script \&quot;return navigator.userAgent;\&quot;)\n\n  (cast String \&quot;a\&quot;)\n\n  (.getProfile (ProfilesIni.) \&quot;default\&quot;)\n  (.readProfiles (ProfilesIni.) (File. \&quot;C:/Users/Xue/AppData/Roaming/Mozilla/Firefox/Profiles/lpobb8os.default\&quot;))\n\n  (macroexpand-1 '(wait-until 10 :id \&quot;su\&quot; ExpectedConditions/presenceOfElementLocated))\n\n  (wait-until-find 10 :id \&quot;s\&quot;)\n\n  (wait-until-clickable 10 :id \&quot;cp\&quot;)\n\n  (take-screenshot)\n\n  (.getScreenshotAs my-driver OutputType/FILE)\n\n  (defn test-pre\n    [x]\n    {:pre [(pos? x)]}\n    (Math/log x))\n\n  (test-pre -2)\n  (.sendKeys (find-element :id \&quot;kw\&quot;)  (into-array (list \&quot;hello\&quot; \&quot;haha\&quot;)))\n\n  (input (find-element :id \&quot;kw\&quot;) \&quot;hello \&quot;)\n\n  (doto (find-element :name \&quot;email\&quot;)\n    (input \&quot;我操\&quot;))\n\n  (doto (find-element :name \&quot;password\&quot;)\n    (input \&quot;wocao\&quot;)\n    submit)\n\n  (click (find-element :class-name \&quot;simple-btn\&quot;))\n\n\n  (to \&quot;http://www.sohu.com\&quot;)\n\n  (click (find-element :css \&quot;input.simple-btn:nth-child(3)\&quot;))\n\n  (to \&quot;https://www.u51.com/\&quot;)\n\n  (click (find-element :css \&quot;.navMenu-money\&quot;))\n\n  (doto (find-element :name \&quot;user_name_input\&quot;)\n    (input \&quot;markxueyuan\&quot;))\n\n  (doto (find-element :name \&quot;user_pwd_input\&quot;)\n    (input \&quot;y95u98a02n08\&quot;))\n\n  (click (find-element :css  \&quot;a.login-btn:nth-child(4)\&quot;))\n\n  (get-cookies)\n\n  (map bean (get-cookies))\n\n  )\n\n&quot; &quot;(use-firefox)&quot; &quot;(ns learn-enlive.routes.extract\n  (:import (java.io StringReader))\n  (:require [learn-enlive.models.selenium :refer :all]\n            [compojure.core :refer :all]\n            [ring.util.response :as response]\n            [net.cgrand.enlive-html :as html]))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox])\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      ))&quot; &quot;(defn extract-entry\n  [entry]\n  (-&gt;&gt; (html/select entry [:li])\n       (map html/text)))&quot; &quot;(defn extract-entry\n  [entry]\n  (-&gt;&gt; (html/select entry [:li])\n       (map html/text)\n       (map s/trim)))&quot; &quot;(count (scratch-transaction-list))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      (partial apply str)\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ((partial apply str))\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ((partial apply str))\n      #(str \&quot;&lt;table class=\\\&quot;table table-striped table-bordered table-hover table-condensed\\\&quot;&gt;\&quot;\n            \&quot;&lt;caption&gt;交易表&lt;/caption&gt;\&quot;\n            \&quot;&lt;tbody&gt;\&quot;\n            %\n            \&quot;&lt;/tbody&gt;\&quot;\n            \&quot;&lt;/table&gt;\&quot;\n            )\n      ))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ((partial apply str))\n      (#(str \&quot;&lt;table class=\\\&quot;table table-striped table-bordered table-hover table-condensed\\\&quot;&gt;\&quot;\n            \&quot;&lt;caption&gt;交易表&lt;/caption&gt;\&quot;\n            \&quot;&lt;tbody&gt;\&quot;\n            %\n            \&quot;&lt;/tbody&gt;\&quot;\n            \&quot;&lt;/table&gt;\&quot;))\n      ))&quot; &quot;(html/deftemplate table \&quot;public/list.html\&quot;\n                  [t]\n                  [:.table] (html/content t))&quot; &quot;(html/deftemplate table \&quot;public/list.html\&quot;\n                  [t]\n                  [[:.table :.table-striped :.table-bordered :.table-hover :.table-condensed]] (html/content t))&quot; &quot;(ns learn-enlive.routes.extract\n  (:import (java.io StringReader))\n  (:require [learn-enlive.models.selenium :refer :all]\n            [compojure.core :refer :all]\n            [ring.util.response :as response]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as s]))&quot; &quot;(defn extract-entry\n  [entry]\n  (-&gt;&gt; (html/select entry [:li])\n       (map html/text)\n       (map s/trim)\n       (map #(str \&quot;&lt;td&gt;\&quot; % \&quot;&lt;/td&gt;\&quot;))))&quot; &quot;(defn scratch-transaction-list\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource\n      (html/select [:#sheetListInitBox :.list-item])\n      (#(map extract-entry %))\n      (#(map (partial apply str) %))\n      (#(map (fn [row] (str \&quot;&lt;tr&gt;\&quot; row \&quot;&lt;/tr&gt;\&quot;)) %))\n      ((partial apply str))\n      (#(str\n            \&quot;&lt;caption&gt;交易表&lt;/caption&gt;\&quot;\n            \&quot;&lt;tbody&gt;\&quot;\n            %\n            \&quot;&lt;/tbody&gt;\&quot;))))&quot; &quot;(scratch-transaction-list)&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params session]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      wrap-session\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))\n&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params session]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      wrap-session\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params session]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      wrap-session\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))&quot; &quot;(ns learn-enlive.routes.login\n  (:require [learn-enlive.models.selenium :refer :all]\n            [compojure.core :refer :all]\n            [ring.util.response :as response]))\n\n\n(defn login-for-51\n  [user pwd]\n  (binding [my-driver (chrome)]\n    (to \&quot;https://www.u51.com/money/\&quot;)\n    (Thread/sleep 2000)\n    (-&gt; (find-element :name \&quot;user_name_input\&quot;)\n        (input user))\n    (-&gt; (find-element :name \&quot;user_pwd_input\&quot;)\n        (input pwd))\n    (Thread/sleep 1000)\n    (click (find-element :class-name \&quot;login-btn\&quot;))\n    my-driver))\n\n(defn redirect\n  [user pwd]\n  (-&gt; (response/redirect \&quot;/status\&quot;)\n      (assoc :session (login-for-51 user pwd))))\n\n\n\n#_(defn login-for-douban\n  [user pwd]\n  (binding [my-driver (chrome)]\n    (to \&quot;https://www.douban.com/accounts/login\&quot;)\n    (Thread/sleep 2000)\n    (-&gt; (find-element :name \&quot;form_email\&quot;)\n        (input user))\n    (-&gt; (find-element :name \&quot;form_password\&quot;)\n        (input pwd))\n    (Thread/sleep 1000)\n    (click (find-element :class-name \&quot;btn-submit\&quot;))))\n\n(defn response\n  []\n  (response/resource-response \&quot;login.html\&quot; {:root \&quot;public\&quot;}))\n\n(defroutes login-page\n  (GET \&quot;/\&quot; [] (response))\n  (POST \&quot;/\&quot; [myname mypwd] (redirect myname mypwd))\n  ;(POST \&quot;/\&quot; request (println request))\n  )&quot; &quot;(ns learn-enlive.repl\n  (:use learn-enlive.handler\n        ring.server.standalone\n        [ring.middleware file file-info params session]))\n\n(defonce server (atom nil))\n\n(defn get-handler []\n  (-&gt; #'my-app\n      (wrap-file \&quot;resources/public\&quot;)\n      ;(wrap-file-info)\n      wrap-params\n      wrap-session\n      ))\n\n(defn start-server\n  [&amp; [port]]\n  (let [port (if port\n               (Integer/parseInt port)\n               8080)]\n    (reset!\n      server\n      (serve (get-handler)\n             {:port port\n              :init init\n              :auto-reload? true\n              :destroy destroy\n              :join true}))\n    (println (str \&quot;you can see site at http://localhost:\&quot; port))))\n\n\n\n(defn stop-server []\n  (.stop @server)\n  (reset! server nil))\n&quot; &quot;(start-server)&quot;], :remote []}}</component>
</project>

